#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1704 0 28 3 17 #"#lang scheme/base"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";TA-BOT:MAILTO nathan.arpin@marquette.edu charles.morley@marquette.e"
 #"du"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";Nathan Arpin and Charlie Morley"
0 0 24 29 1 #"\n"
0 0 17 3 124
(
 #";These test cases are licensed only under terms discussed with eithe"
 #"r of the authors and terms that appear in this document."
) 0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";No republishing or redistribution of these test cases may be done b"
 #"y the licensed recipients of these test cases."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 6 #"planet"
0 0 24 3 1 #" "
0 0 14 3 23 #"schematics/schemeunit:3"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"hw7.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 6 #"planet"
0 0 24 3 1 #" "
0 0 14 3 31 #"schematics/schemeunit:3/text-ui"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"schemeunit-display.scm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"combine-string-lines"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lines"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 2 #") "
0 0 19 3 2 #"\"\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"combine-string-lines"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lines"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";takes in the mu-concrete-syntax to run, followed by the list of out"
 #"put lines"
) 0 0 24 29 1 #"\n"
0 0 17 3 131
(
 #";e.g., if running \"{print 4; print 5}\" and expecting \"4\\n5\\n\" "
 #"back, type (check-program-output-equal? \"{print 4; print 5}\" \"4\""
 #" \"5\")"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"program-input"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"expected-output-lines"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 26 #"check-displayed-and-equal?"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 13 #"program-input"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 20 #"combine-string-lines"
0 0 24 3 1 #" "
0 0 14 3 21 #"expected-output-lines"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 14 3 12 #"run-complete"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";takes in the mu-concrete-syntax to run, and runs the \"check-exn\" "
 #"assertion on it"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"check-exception?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"program-input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"check-exn"
0 0 24 3 1 #" "
0 0 14 3 4 #"exn?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 3 #"run"
0 0 24 3 1 #" "
0 0 14 3 13 #"program-input"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"run-func-tests"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"test-suite"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"HW7: run tests\""
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Can run assignment statement - trivial\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"var x = 4; x = 5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"Can run assignment statement - nontrivial\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"var x = 4; {x = 5; print x}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 73
(
 #"\"Assignment statement throws exception if not previously bound - tr"
 #"ivial\""
) 0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"var y = 4; x = 5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 76
(
 #"\"Assignment statement throws exception if not previously bound - no"
 #"ntrivial\""
) 0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"var y = 4; {x = 5; print x}\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Can run print statement\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"print 5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"Can run compound statement with no statements\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"{}\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"Can run compound statement with one statement\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"{print 4}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"Can run compound statement with many statements\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"{print 4; print 5; print 6}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"Can run if statement - true condition\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"if (greater 3 2) then print 4 else print 5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"Can run if statement - false condition\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"if (greater 2 3) then print 4 else print 5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"Can run while statement with false condition\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"while #f do print 5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"Can run while statement which changes condition\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"var x = 3; while (greater x 0) do {print x; x = (sub x 1)}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 62
#"\"Can run block statement with one assignment - basic bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"var x = 3; print x\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 64
#"\"Can run block statement with many assignments - basic bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 54 #"\"var x = 3, y = 4, z = 5; {print z; print x; print y}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"Can run block statement for bound bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"var x = 3; var x = 4; print x\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 73
(
 #"\"Block statement throws exception for trying to let* (feedback bind"
 #"ings)\""
) 0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"var x = 3, y = x; print 1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Can express number\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"print 0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Can express true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"print #t\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Can express false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"print #f\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"Throws exception for trying to express free-var\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"print x\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Can run if-then\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (if #t 1 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Can run if-else\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (if #f 1 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Can run if with sub-expressions\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 56
#"\"print (if (and (lesser 2 4) (lesser 4 2)) 1 (add 1 1))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 46 #"\"If with number as condition throws exception\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"print (if 5 1 2)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run let for basic bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"print (let ((x 4)) (add x 1))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run let for bound bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 37 #"\"print (let ((x 4)) (let ((y x)) y))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Let does not let*\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"print (let ((x 4)) (let ((x 5) (y x)) y))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"Let throws exception for trying to let* (feedback bindings)\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"print (let ((x 4) (y x)) 1)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 64
#"\"Let throws exception for trying to letrec (recursive bindings)\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 72
(
 #"\"print (let ((e (lambda (x) (if (equal 0 x) #t (e (sub 1 x)))))) (e"
 #" 1))\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 50 #"\"Let closes lambda binding with outer environment\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 68
(
 #"\"print (let ((x 5)) (let ((x 4) (y (lambda (z) (add x z)))) (y 3)))"
 #"\""
) 0 0 24 3 1 #" "
0 0 19 3 3 #"\"8\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Let evaluates value of binding\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"print (let ((x (add 1 2))) (add x 1))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Can run let* for basic bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"print (let* ((x 4)) (add x 1))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Can run let* for bound bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"print (let* ((x 4)) (let* ((y x)) y))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"Can run let* for feedback bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"print (let* ((x 4) (y x)) y)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 65
#"\"Let* throws exception for trying to letrec (recursive bindings)\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 73
(
 #"\"print (let* ((e (lambda (x) (if (equal 0 x) #t (e (sub 1 x)))))) ("
 #"e 1))\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 57
#"\"Let* closes lambda binding with in-progress environment\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 70
(
 #"\"print (let* ((x 5)) (let* ((x 4) (y (lambda (z) (add x z)))) (y 3)"
 #"))\""
) 0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Let* evaluates value of binding\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"print (let* ((x (add 1 2))) (add x 1))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run letrec for basic lambda bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"print (letrec ((e (lambda (x) (add 1 x)))) (e 10))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"11\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run letrec for bound lambda bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 71
(
 #"\"print (letrec ((e (lambda () 5))) (letrec ((f (lambda () e))) ((f)"
 #")))\""
) 0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"Can run letrec for feedback bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"print (letrec ((e (lambda () 5)) (f (lambda () e))) ((f)))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"Can run letrec for recursive bindings\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"print (letrec"
0 0 19 3 1 #" "
0 0 19 3 60
#"((e (lambda (x) (if (equal 0 x) #t (e (sub x 1)))))) (e 3))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can run cond-else-only\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"print (cond (else 4))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Can run cond-true-conditional\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 55 #"\"print (cond ((and #t #f) 1) ((and #t #t) 2) (else 3))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run cond-false-conditional\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 54 #"\"print (cond ((and #t #f) 1) ((or #f #f) 2) (else 3))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Can express lambda\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"print (lambda () 0)\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"(lambda () 0)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"Can express lambda with outer environment\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"print ((lambda (y) (lambda (z) y)) 1)\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"(lambda (z) y)\""
0 0 24 3 3 #")) "
0 0 17 3 71
(
 #";(lambda (z) y) is closed with the environment [y=1], but never appl"
 #"ied"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Can run application\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"print ((lambda (x y) y) 1 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"Can run application with currying\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"print (((lambda (x) (lambda (y) (add x y))) 1) 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"Can run application indirectly through lambda\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"print ((lambda (op) (op 3 2)) sub)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 44 #"\"Can run application indirectly through let\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 40 #"\"print (let ((x (lambda (z) z))) (x 3))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"Can run application indirectly through let*\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"print (let* ((x (lambda (z) z))) (x 3))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 109
(
 #";\"Can run application indirectly through letrec\" already tested by"
 #" \"Can run letrec for basic lambda bindings\""
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"Application closes operands with outer environment\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 53 #"\"print (let ((x 4)) ((lambda (x y) y) 5 (add x 10)))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"14\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Can run add\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"print (add 1 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 34 #";(test-case \"Can run variadic add\""
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 71
(
 #";           (check-program-output"
 #"-equal? \"print (add 1 2 3 4 5)\" \"15\"))"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Can run sub\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"print (sub 2 1)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Can run mul\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"print (mul 2 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Can run div\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"print (div 4 2)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Can run mod\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"print (mod 5 3)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Can run equal-true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (equal 1 1)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Can run equal-false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (equal 0 1)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Can run lesser-true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"print (lesser 2 3)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can run lesser-false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"print (lesser 3 2)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can run greater-true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"print (greater 5 3)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Can run greater-false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"print (greater 3 5)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Can run and-true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (and #t #t)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Can run and-false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (and #t #f)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Can run or-true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"print (or #t #f)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Can run or-false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"print (or #f #f)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Can run xor-true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (xor #f #t)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Can run xor-false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (xor #t #t)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Can run emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"print (emptylist)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"()\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 33 #"\"Can run cons - item + emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"print (cons 2 (emptylist))\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"(2)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Can run cons - item + list\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"print (cons 2 (cons #t (cons 4 (emptylist))))\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"(2 #t 4)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Can run cons - item + item\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"print (cons 2 2)\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"(2 . 2)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"Can run cons - emptylist + emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"print (cons (emptylist) (emptylist))\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"(())\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Can run list - no items\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"print (list)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"()\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"Can run list - one item\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"print (list 2)\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"(2)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can run list - many items\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"print (list 2 #t 4)\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"(2 #t 4)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run list - items and lists\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"print (list 2 (list 3))\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"(2 (3))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can run null? - emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"print (null? (emptylist))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#t\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can run null? - list\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"print (null? (list 2))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Can run null? - improper list\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"print (null? (cons 2 2))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"Can run null? - non-list\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"print (null? 2)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"#f\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run car - item + emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"print (car (cons 2 (emptylist)))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can run car - item + list\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"print (car (cons 4 (cons 3 (cons 2 (emptylist)))))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can run car - item + item\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"print (car (cons 2 2))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"Car throws exception when called on emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"print (car (emptylist))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run cdr - item + emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"print (cdr (cons 2 (emptylist)))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"()\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can run cdr - item + list\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 52 #"\"print (cdr (cons 4 (cons 3 (cons 2 (emptylist)))))\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"(3 2)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can run cdr - item + item\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"print (cdr (cons 2 3))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 47 #"\"Cdr throws exception when called on emptylist\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 16 #"check-exception?"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"print (cdr (emptylist))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Can express num-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"print (lambda () 5)\""
0 0 24 3 1 #" "
0 0 19 3 15 #"\"(lambda () 5)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Can express bool-exp true\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"print (lambda () #t)\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"(lambda () #t)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"Can express bool-exp false\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"print (lambda () #f)\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"(lambda () #f)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Can express var-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"print (lambda (x) x)\""
0 0 24 3 1 #" "
0 0 19 3 16 #"\"(lambda (x) x)\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Can express if-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"print (lambda () (if #t 0 1))\""
0 0 24 3 1 #" "
0 0 19 3 25 #"\"(lambda () (if #t 0 1))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Can express let-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"print (lambda () (let ((a 0) (b #t)) a))\""
0 0 24 3 1 #" "
0 0 19 3 36 #"\"(lambda () (let ((a 0) (b #t)) a))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can express let*-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"print (lambda () (let* ((a 0) (b a)) b))\""
0 0 24 3 1 #" "
0 0 19 3 36 #"\"(lambda () (let* ((a 0) (b a)) b))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"Can express letrec-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 87
(
 #"\"print (lambda () (letrec ((a (lambda (x) (if (equal 0 x) #t (a (su"
 #"b x 1)))))) (a 1)))\""
) 0 0 24 3 1 #" "
0 0 19 3 81
(
 #"\"(lambda () (letrec ((a (lambda (x) (if (equal 0 x) #t (a (sub x 1)"
 #"))))) (a 1)))\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can express cond-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"print (lambda () (cond (#t 1) (else 4)))\""
0 0 24 3 1 #" "
0 0 19 3 36 #"\"(lambda () (cond (#t 1) (else 4)))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can express proc-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"print (lambda () (lambda (x y) x))\""
0 0 24 3 1 #" "
0 0 19 3 30 #"\"(lambda () (lambda (x y) x))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Can express call-exp\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"print (lambda () (add 1 2))\""
0 0 24 3 1 #" "
0 0 19 3 23 #"\"(lambda () (add 1 2))\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run complicated-sequence-1\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 53 #"\"print (add (sub 1 2) (mul (div 20 7) (mod 101 10)))\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Can run complicated-sequence-2\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 71
(
 #"\"print (let ((x 5) (y 6)) (if (and (greater x 10) (equal y 6)) 20 4"
 #"0))\""
) 0 0 24 3 1 #" "
0 0 19 3 4 #"\"40\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment5-supplied test case 1\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"print ((lambda (x y) (add x y)) 10 3)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"13\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment5-supplied test case 2\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"print (cond (#t 10) (else 20))\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"10\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment5-supplied test case 3\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 66
#"\"print ((lambda (x) (cond ((lesser x 0) (sub 0 x)) (else x))) 10)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"10\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment5-supplied test case 4\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 74
(
 #"\"print ((lambda (x) (cond ((lesser x 0) (sub 0 x)) (else x))) (sub "
 #"0 10))\""
) 0 0 24 3 1 #" "
0 0 19 3 4 #"\"10\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment6-supplied test case 1\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 102
(
 #"\"print (letrec ((fact (lambda (x) (cond ((equal 0 x) 1) (else (mul "
 #"x (fact (sub x 1)))))))) (fact 5))\""
) 0 0 24 3 1 #" "
0 0 19 3 5 #"\"120\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment6-supplied test case 2\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 195
(
 #"\"print ((car (car (cdr (list (lambda (x) (add x 1)) (cons (lambda ("
 #"y) (mul y 2)) (lambda (z) (mod z 3))))))) (let* ((x 5) (y (mul x 2))"
 #" (z (mul y 2))) (if (lesser y z) (div 100 y) (sub 100 x))))\""
) 0 0 24 3 1 #" "
0 0 19 3 4 #"\"20\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment7-supplied test case 1\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"var x = 5; print x\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment7-supplied test case 2\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 38 #"\"var x = 3; var y = 4; print(add x y)\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment7-supplied test case 3\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 99
(
 #"\"var x = 3; var y = 4; var z = 0; {while (greater x 0) do {z = (add"
 #" z y); x = (sub x 1)}; print z}\""
) 0 0 24 3 1 #" "
0 0 19 3 4 #"\"12\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment7-supplied test case 4\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 53 #"\"var x = 3; {print x; var x = 4; {print x}; print x}\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"test-case"
0 0 24 3 1 #" "
0 0 19 3 42 #"\"Can run assignment7-supplied test case 5\""
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 27 #"check-program-output-equal?"
0 0 24 3 1 #" "
0 0 19 3 59
#"\"var f = (lambda (x y) (mul x y)); var x = 3; print(f 4 x)\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"12\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"run-tests"
0 0 24 3 1 #" "
0 0 14 3 14 #"run-func-tests"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
